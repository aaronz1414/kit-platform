extend schema
    @link(
        url: "https://specs.apollo.dev/federation/v2.3"
        import: ["@key", "@interfaceObject"]
    )

type Query {
    myHistory: [ContentProgress!]!
    # myBookmarks: [Bookmark!]!
}

type Mutation {
    recordArticleProgress(
        input: RecordArticleProgressInput!
    ): RecordArticleProgressPayload
    recordQuizProgress(
        input: RecordQuizProgressInput!
    ): RecordQuizProgressPayload
    # recordQuizProgress(
    #     input: RecordQuizProgressInput!
    # ): RecordQuizProgressPayload

    # NOTE: While articles can easily be determined completed within the
    # activity service, quizzes and videos would either need to have
    # additional information (number of questions and duration, respectively)
    # stored in the activity service to determine whether they are completed.
    # It seems better to me to not have that dependency, and simply add a
    # mutation for marking those content types completed instead.
    #
    # markCompleted(input: MarkCompletedInput!): MarkCompletedPayload

    # addBookmark(input: AddBookmarkInput!): AddBookmarkPayload
    # removeBookmark(input: RemoveBookmarkInput!): RemoveBookmarkPayload
}

scalar DateTime

interface ContentProgress {
    startedAt: DateTime!
    lastProgressAt: DateTime!
    completedAt: DateTime
}

# enum ContentType {
#   ARTICLE
#   QUIZ
#   VIDEO
# }

# input MarkCompletedInput {
#    content: [MarkCompletedContentInput!]!
# }
#
# input MarkCompletedContentInput {
#     contentId: ID!
#     contentType: ContentType!
# }
#
# type MarkCompletedPayload {
#     completed: [ContentProgress!]!
#     # TODO: User errors could be added here
# }

###########
# ARTICLE #
###########

type Article @key(fields: "id") {
    id: ID!
    myProgress: ArticleProgress
    # myBookmark: Bookmark
}

type ArticleProgress implements ContentProgress {
    startedAt: DateTime!
    lastProgressAt: DateTime!
    completedAt: DateTime
    percentage: Int!
}

input RecordArticleProgressInput {
    articleId: ID!
    percentage: Int!
}

type RecordArticleProgressPayload {
    progress: ArticleProgress
    # TODO: User errors could be added here
}

########
# QUIZ #
########

type Quiz @key(fields: "id") {
    id: ID!
    myProgress: QuizProgress
    # myBookmark: Bookmark
}

type QuizQuestion @key(fields: "id", resolvable: false) {
    id: ID!
}

type QuizProgress implements ContentProgress {
    startedAt: DateTime!
    lastProgressAt: DateTime!
    completedAt: DateTime
    latestQuestion: QuizQuestion!
}

input RecordQuizProgressInput {
    quizId: ID!
    latestQuestionId: ID!
}

type RecordQuizProgressPayload {
    progress: QuizProgress
    # TODO: Could add user errors here
}

#########
# VIDEO #
#########

type Video @key(fields: "id") {
    id: ID!
    exampleField: String!
    # myProgress: VideoProgress
    # myBookmark: Bookmark
}

# type VideoProgress implements ContentProgress {
#     startedAt: DateTime!
#     lastProgressAt: DateTime!
#     completedAt: DateTime
#     time: Int!
# }

# input RecordVideoProgressInput {
#     videoId: ID!
#     time: ID!
# }
#
# type RecordVideoProgressPayload {
#     progress: VideoProgress
#     # TODO: Could add user errors here
# }

#############
# BOOKMARKS #
#############

# union Content = Article | Quiz | Video

# type Bookmark {
#     bookmarkedAt: DateTime!
#     content: Content!
# }

# input AddBookmarkInput {
#    content: [AddBookmarkContentInput!]!
# }
#
# input AddBookmarkContentInput {
#     contentId: ID!
#     contentType: ContentType!
# }
#
# type AddBookmarkPayload {
#     bookmarks: [Bookmark!]!
#     # TODO: User errors could be added here
# }

# input RemoveBookmarkInput {
#    content: [RemoveBookmarkContentInput!]!
# }
#
# input RemoveBookmarkContentInput {
#     contentId: ID!
#     contentType: ContentType!
# }
#
# type RemoveBookmarkPayload {
#     success: Boolean!
#     # TODO: User errors could be added here
# }
